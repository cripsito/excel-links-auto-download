import React, { useState, useMemo, useCallback } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import { useDropzone } from 'react-dropzone';
import XLSX from 'xlsx';

function downloadFile(file) {
  // Create a link and set the URL using `createObjectURL`
  const link = document.createElement('a');
  link.style.display = 'none';
  link.href = URL.createObjectURL(file);
  //link.download = file.name;

  // It needs to be added to the DOM so it can be clicked
  document.body.appendChild(link);
  link.click();

  // To make this work on Firefox we need to wait
  // a little while before removing it.
  setTimeout(() => {
    URL.revokeObjectURL(link.href);
    link.parentNode.removeChild(link);
  }, 0);
}
function download(url, filename) {
  fetch(url).then(function (t) {
    return t.blob().then((b) => {
      var a = document.createElement('a');
      a.href = URL.createObjectURL(b);
      a.setAttribute('download', filename);
      a.click();
    });
  });
}

const baseStyle = {
  flex: 1,
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
  padding: '20px',
  borderWidth: 2,
  borderRadius: 2,
  borderColor: '#eeeeee',
  borderStyle: 'dashed',
  backgroundColor: '#fafafa',
  color: '#bdbdbd',
  outline: 'none',
  transition: 'border .24s ease-in-out',
  maxHeight: '180px',
  width: '100%',
  marginTop: '20px',
};

const activeStyle = {
  borderColor: '#2196f3',
};

const acceptStyle = {
  borderColor: '#00e676',
};

const rejectStyle = {
  borderColor: '#ff1744',
};

export default function Home() {
  const [videoLinks, setVideoLinks] = useState([]);
  const onDrop = useCallback((acceptedFiles) => {
    // Do something with the files
    acceptedFiles.map((file) => {
      console.log(file);
      var reader = new FileReader();
      reader.onload = function (e) {
        var data = new Uint8Array(e.target.result);
        var workbook = XLSX.read(data, { type: 'array' });
        var first_worksheet = workbook.Sheets[workbook.SheetNames[0]];
        var data = XLSX.utils.sheet_to_json(first_worksheet, { header: 1 });
        console.log(data);
        setVideoLinks(data);

        /* DO SOMETHING WITH workbook HERE */
      };
      reader.readAsArrayBuffer(file);
    });
  }, []);
  const {
    getRootProps,
    getInputProps,
    isDragActive,
    isDragAccept,
    isDragReject,
    acceptedFiles,
  } = useDropzone({ accept: '.xlsx', onDrop });
  const style = useMemo(
    () => ({
      ...baseStyle,
      ...(isDragActive ? activeStyle : {}),
      ...(isDragAccept ? acceptStyle : {}),
      ...(isDragReject ? rejectStyle : {}),
    }),
    [isDragActive, isDragReject, isDragAccept],
  );
  const files = acceptedFiles.map((file) => (
    <li key={file.path}>
      {file.path} - {file.size} bytes
    </li>
  ));
  const startDownload = useCallback(() => {
    if (videoLinks.length > 0) {
      videoLinks.map((video, index) => {
        /*const a = document.createElement('a');
         a.href = video[0];
        a.download = index + 1 + '';
        document.body.appendChild(a);
        a.click(); */
        //document.body.removeChild(a);
        console.log(video[0]);
        download(video[0], index + 1 + '_video.mp4');
      });
    }
  }, [videoLinks]);
  return (
    <div className={styles.container}>
      <Head>
        <title>Rick Files</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Excel Links auto download</h1>

        <p className={styles.description}>To start, drop your excel file</p>

        <div {...getRootProps({ style })}>
          <input {...getInputProps()} />
          <p>Drag 'n' drop some files here, or click to select files</p>
        </div>
        <ul>{files}</ul>
        {videoLinks.length > 0 && (
          <button onClick={startDownload}>Start Downloading</button>
        )}
      </main>

      <footer className={styles.footer}></footer>
    </div>
  );
}
